Codigo mais robusto, porem não finalizado, contem alguns bugs

import cv2
import os
import numpy as np
import urllib.request
import time
from datetime import datetime
from tkinter import simpledialog, messagebox, Tk

# --- Constantes ---
FACE_CASCADE_URL = 'https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml'
EYE_CASCADE_URL = 'https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_eye.xml'
FACE_CASCADE_FILE = 'haarcascade_frontalface_default.xml'
EYE_CASCADE_FILE = 'haarcascade_eye.xml'


# --- Funções utilitárias ---
def download_file(url, filename):
    """Baixa um arquivo se ele não existir localmente."""
    if os.path.exists(filename):
        return True

    try:
        print(f"[INFO] Baixando {filename}...")
        urllib.request.urlretrieve(url, filename)
        print(f"[INFO] {filename} baixado com sucesso.")
        return True
    except Exception as e:
        print(f"[ERRO] Falha ao baixar {filename}: {e}")
        return False


def get_cascade(url, filename):
    """Obtém e carrega um classificador Haar."""
    if not download_file(url, filename):
        raise FileNotFoundError(f"Não foi possível obter o classificador: {filename}")

    cascade = cv2.CascadeClassifier(filename)
    if cascade.empty():
        raise ValueError(f"O classificador {filename} está vazio.")
    return cascade


def preprocess_image(img):
    """Converte imagem para tons de cinza, equaliza e aplica blur."""
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) if len(img.shape) == 3 else img
    gray = cv2.equalizeHist(gray)
    return cv2.GaussianBlur(gray, (5, 5), 0)


def create_attendance_file():
    """Cria arquivo de presença do dia."""
    today = datetime.now().strftime("%Y-%m-%d")
    filename = f"presenca_{today}.txt"

    if not os.path.exists(filename):
        with open(filename, 'w') as f:
            f.write(f"Registro de Presença - {today}\n")
            f.write("=" * 30 + "\n")
    return filename


def register_attendance(name, filename):
    """Registra presença no arquivo."""
    timestamp = datetime.now().strftime("%H:%M:%S")
    with open(filename, 'a') as f:
        f.write(f"{name} - {timestamp}\n")


# --- Classe principal ---
class FaceRecognizer:
    def __init__(self):
        self.face_cascade = get_cascade(FACE_CASCADE_URL, FACE_CASCADE_FILE)
        self.eye_cascade = get_cascade(EYE_CASCADE_URL, EYE_CASCADE_FILE)
        self.faces_dir = 'rostos_salvos'
        self.attendance_file = create_attendance_file()

        os.makedirs(self.faces_dir, exist_ok=True)
        self.known_faces = self.load_known_faces()
        self.recognized_names = {}
        self.last_seen = {}

    def load_known_faces(self):
        """Carrega todos os rostos cadastrados localmente."""
        known_faces = {}
        for person in os.listdir(self.faces_dir):
            person_path = os.path.join(self.faces_dir, person)
            if os.path.isdir(person_path):
                images = []
                for file in os.listdir(person_path):
                    if file.lower().endswith((".jpg", ".jpeg", ".png")):
                        img_path = os.path.join(person_path, file)
                        img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                        if img is not None:
                            images.append(img)
                if images:
                    known_faces[person] = images
        print(f"[INFO] {len(known_faces)} pessoas carregadas.")
        return known_faces

    def compare_faces(self, face_img, threshold=30):
        """Compara um rosto detectado com os rostos conhecidos."""
        best_match = None
        min_diff = float('inf')
        processed_face = cv2.equalizeHist(cv2.resize(face_img, (100, 100)))

        for name, faces in self.known_faces.items():
            for known_face in faces:
                try:
                    known_proc = cv2.equalizeHist(cv2.resize(known_face, (100, 100)))
                    diff = np.sum((processed_face.astype("float") - known_proc.astype("float")) ** 2)
                    diff /= processed_face.size

                    if diff < min_diff:
                        min_diff = diff
                        best_match = name
                except:
                    continue

        print(f"[DEBUG] Diferença mínima: {min_diff:.2f}, Reconhecido: {best_match}")
        return best_match if min_diff < threshold else None

    def save_person(self, name, face_img):
        """Salva 3 poses artificiais para uma nova pessoa."""
        person_dir = os.path.join(self.faces_dir, name)
        os.makedirs(person_dir, exist_ok=True)

        timestamp = int(time.time())
        h, w = face_img.shape

        # Pose frontal
        cv2.imwrite(os.path.join(person_dir, f"{name}_frontal_{timestamp}.jpg"), face_img)

        # Pose esquerda
        left = cv2.warpAffine(face_img, cv2.getRotationMatrix2D((w/2, h/2), 15, 1), (w, h))
        cv2.imwrite(os.path.join(person_dir, f"{name}_esquerda_{timestamp}.jpg"), left)

        # Pose direita
        right = cv2.warpAffine(face_img, cv2.getRotationMatrix2D((w/2, h/2), -15, 1), (w, h))
        cv2.imwrite(os.path.join(person_dir, f"{name}_direita_{timestamp}.jpg"), right)

        self.known_faces = self.load_known_faces()
        print(f"[INFO] {name} salvo com 3 poses.")

    def run(self):
        """Inicia o reconhecimento facial."""
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("[ERRO] Não foi possível acessar a câmera.")
            return

        print("Pressione 's' para cadastrar rosto, 'q' para sair.")
        root = Tk()
        root.withdraw()
        frame_count = 0

        while True:
            ret, frame = cap.read()
            if not ret:
                print("[ERRO] Falha ao capturar frame.")
                break

            frame = cv2.flip(frame, 1)
            gray = preprocess_image(frame)
            faces = self.face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(100, 100))

            for (x, y, w, h) in faces:
                roi_gray = gray[y:y+h, x:x+w]
                face_id = f"{x}_{y}_{w}_{h}"
                name = self.last_seen.get(face_id)

                if frame_count % 30 == 0 or name is None:
                    name = self.compare_faces(roi_gray)
                    self.last_seen[face_id] = name

                    if name and self.recognized_names.get(face_id) != name:
                        self.recognized_names[face_id] = name
                        register_attendance(name, self.attendance_file)
                        print(f"[INFO] Presença registrada: {name}")

                # Exibe nome
                if name:
                    cv2.putText(frame, name, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
                cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

            cv2.imshow("Reconhecimento Facial (s = salvar, q = sair)", frame)
            frame_count += 1

            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
            elif key == ord('s') and faces:
                (x, y, w, h) = faces[0]
                roi = gray[y:y+h, x:x+w]
                name = simpledialog.askstring("Cadastro", "Digite o nome da pessoa:", parent=root)
                if name:
                    self.save_person(name, roi)
                    messagebox.showinfo("Cadastro realizado", f"{name} cadastrado com sucesso!", parent=root)

        cap.release()
        cv2.destroyAllWindows()


# --- Execução ---
if __name__ == "__main__":
    FaceRecognizer().run()
